generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  companions Companion[]
}

model Topic {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  notes Note[]
}

model Invitation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  inviteCode  String
  companionId String
  userId      String
  email       String
  status      String
}

model Companion {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  namespace String @default("Pending")
  status    String @default("Active") // Inactive, Active

  adminStatus String @default("Active") // Pending, Active, Suspended

  adminAllowVoice String @default("Active") // Inactive, Active for admin
  allowVoice      String @default("Active") // Inactive, Active for owner of Persona

  role       String @default("You are an ai assistant to converse on a friendly level with user.")
  publicView String @default("Yes") // companion can be available to public or private

  userId        String // the root owner of this persona, can delete and edit
  userName      String
  src           String // the Cloudinary source url fot image of companion
  name          String
  description   String
  //instructions  String?
  temperature   Float          @default(0.6)
  // seed          String
  relationship  String         @default("User is a stranger and a fan to companion")
  voiceId       String         @default("2Egq65mAdch3uRX23oDd")
  pineconeIndex String?        @default("")
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String         @db.ObjectId
  localChatApi  String         @default("/api/streaming")
  chatLink      String         @default("noteschat")
  messages      Message[]
  relationships Relationship[]
  groups        Group[]
  notes         Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([name])
}

enum Role {
  user
  system
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionId String @db.ObjectId
  userId      String

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

// the relationship between the user and the persona-companion
model Relationship {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String // clerk's authenication userId of logged-in user

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  adminStatus     String @default("Active") // for admin only
  status          String @default("Active") // for owner 
  adminAllowVoice String @default("Active") // for owner 

  adminAddRelationshipNotes String @default("No")
  adminAddPersonaNotes      String @default("No")

  companionId String    @db.ObjectId
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  notes Note[]

  // profileId   String    @db.ObjectId
  // profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title String? @default("")

  // determing the context between user and persona
  name      String @default("")
  nickNames String @default("")

  gender           String @default("unknown")
  educationalLevel String @default("unknown")
  ageLevel         String @default("unknown")

  role          String  @default("You are a friendly stranger to user") //role of the user: User, Admin, Manager
  content       String  @default("I am a great fan of yours.") // starting context of the persona from profile of the user
  temperature   Float   @default(0.5) // the temperature of the relationship between user and persona
  pineconeIndex String? @default("") // if there is a pineconeIndex then additonal context about user from pinecone will be used 

  // for billing purposes
  conversations      Int @default(0)
  conversationsLimit Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companionId])
  @@index([userId])
}

// the relationship between the user and the persona-companion
model Group {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  status String @default("Active")
  name   String @default("Group")

  userId String // clerk's authenication userId of logged-in user
  role   String @default("Member") // Admin, Member

  companionId String    @db.ObjectId
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  // for billing purposes
  conversations      Int @default(0)
  conversationsLimit Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companionId])
  @@index([userId])
}

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  role               String
  name               String
  email              String
  encrypted_password String
  content            String
  conversations      Int    @default(0)
  conversationsLimit Int    @default(10)
  //companionId String  @db.ObjectId
  //userId      String
  //relationships Relationship[]

  //companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@@index([companionId])
}

// profile contains the default notes about a user and any persona subscribed 
model Profile {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  adminStatus        String  @default("Active")
  status             String  @default("Active")
  userId             String  @default("user")
  role               String  @default("user")
  firstName          String  @default("unknown")
  lastName           String  @default("unknown")
  nickNames          String  @default("friend")
  email              String?
  phone              String?
  content            String?
  gender             String  @default("unknown")
  educationLevel     String  @default("unknown")
  ageLevel           String  @default("unknown")
  conversations      Int     @default(0)
  conversationsLimit Int     @default(10)
  betaUser           Boolean @default(true)

  relationships Relationship[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@@index([companionId])
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Note {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String  @default("title")
  content String?

  companionId String    @db.ObjectId
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  topicId String? @db.ObjectId
  topic   Topic?  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  relationshipId String?       @db.ObjectId
  relationship   Relationship? @relation(fields: [relationshipId], references: [id], onDelete: Cascade)

  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([companionId])
  @@index([userId])
  @@map("note")
}
